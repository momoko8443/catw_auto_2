// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-passport-strategy/707999fe332c7372f21fad3fcd2639b0b0adcf29/lib/strategy.d.ts
declare module '~passport-oauth2~passport-strategy/lib/strategy' {
abstract class Strategy {
  /**
   * Implement `autheticate()`, performing the necessary operations required by
   * the authentication scheme or protocol being implemented.
   */
  abstract authenticate (this: Strategy.AugmentedStrategy, req: Strategy.Request, options?: any): void;
}

namespace Strategy {
  export interface Request {
    url: string;
    method: string;
    headers: {};
  }

  export class AugmentedStrategy implements Strategy {
    authenticate (req: Strategy.Request, options?: any): void;

    /**
     * Authenticate `user`, with optional `info`.
     *
     * Strategies should call this function to successfully authenticate a
     * user.  `user` should be an object supplied by the application after it
     * has been given an opportunity to verify credentials.  `info` is an
     * optional argument containing additional user information.  This is
     * useful for third-party authentication strategies to pass profile
     * details.
     */
    success (user: any, info: any): void;

    /**
     * Fail authentication, with optional `challenge` and `status`, defaulting
     * to 401.
     *
     * Strategies should call this function to fail an authentication attempt.
     */
    fail (challenge: string, status: number): void;
    fail (status: number): void;

    /**
     * Redirect to `url` with optional `status`, defaulting to 302.
     *
     * Strategies should call this function to redirect the user (via their user
     * agent) to a third-party website for authentication.
     */
    redirect (url: string, status?: number): void;

    /**
     * Pass without making a success or fail decision.
     *
     * Under most circumstances, Strategies should not need to call this
     * function.  It exists primarily to allow previous authentication state
     * to be restored, for example from an HTTP session.
     */
    pass (): void;

    /**
     * Internal error while performing authentication.
     *
     * Strategies should call this function when an internal error occurs
     * during the process of performing authentication; for example, if the
     * user directory is not available.
     */
    error (err: Error): void;
  }
}

export = Strategy;
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-passport-strategy/707999fe332c7372f21fad3fcd2639b0b0adcf29/lib/index.d.ts
declare module '~passport-oauth2~passport-strategy/lib/index' {
import _Strategy = require('~passport-oauth2~passport-strategy/lib/strategy');

module '~passport-oauth2~passport-strategy/lib/strategy' {
  export const Strategy: typeof _Strategy;
}

export = _Strategy;
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-passport-oauth2/b3d37ae5a881932321d5a4b1a052ddc4ef5af42c/lib/store/null.d.ts
declare module '~passport-oauth2/lib/store/null' {
class NullStore {
  store (req: NullStore.Request, cb: (err?: Error | null, state?: string) => void): void;
  verify (req: NullStore.Request, providedState: string, cb: (err: Error | null, ok: boolean) => void, state?: { message: string }): void;
}

namespace NullStore {
  export interface Request {}
}

export = NullStore;
}
declare module 'passport-oauth2/lib/store/null' {
import main = require('~passport-oauth2/lib/store/null');
export = main;
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-passport-oauth2/b3d37ae5a881932321d5a4b1a052ddc4ef5af42c/lib/strategy.d.ts
declare module '~passport-oauth2/lib/strategy' {
import Strategy = require('~passport-oauth2~passport-strategy/lib/index');
import Store = require('~passport-oauth2/lib/store/null');

/**
 * Creates an instance of `OAuth2Strategy`.
 *
 * The OAuth 2.0 authentication strategy authenticates requests using the OAuth
 * 2.0 framework.
 *
 * OAuth 2.0 provides a facility for delegated authentication, whereby users can
 * authenticate using a third-party service such as Facebook.  Delegating in
 * this manner involves a sequence of events, including redirecting the user to
 * the third-party service for authorization.  Once authorization has been
 * granted, the user is redirected back to the application and an authorization
 * code can be used to obtain credentials.
 *
 * Applications must supply a `verify` callback, for which the function
 * signature is:
 *
 *     function(accessToken, refreshToken, profile, done) { ... }
 *
 * The verify callback is responsible for finding or creating the user, and
 * invoking `done` with the following arguments:
 *
 *     done(err, user, info);
 *
 * `user` should be set to `false` to indicate an authentication failure.
 * Additional `info` can optionally be passed as a third argument, typically
 * used to display informational messages.  If an exception occured, `err`
 * should be set.
 *
 * Examples:
 *
 *     passport.use(new OAuth2Strategy({
 *         authorizationURL: 'https://www.example.com/oauth2/authorize',
 *         tokenURL: 'https://www.example.com/oauth2/token',
 *         clientID: '123-456-789',
 *         clientSecret: 'shhh-its-a-secret'
 *         callbackURL: 'https://www.example.net/auth/example/callback'
 *       },
 *       function(accessToken, refreshToken, profile, done) {
 *         User.findOrCreate(..., function (err, user) {
 *           done(err, user);
 *         });
 *       }
 *     ));
 */
class OAuth2Strategy <P extends any> implements Strategy {
  name: string;

  constructor (options: OAuth2Strategy.Options, cb: OAuth2Strategy.VerifyFunction<P>);

  /**
   * Authenticate request by delegating to a service provider using OAuth 2.0.
   */
  authenticate (req: OAuth2Strategy.Request, options: OAuth2Strategy.AuthenticateOptions): void;

  /**
   * Retrieve user profile from service provider.
   *
   * OAuth 2.0-based authentication strategies can overrride this function in
   * order to load the user's profile from the service provider.  This assists
   * applications (and users of those applications) in the initial registration
   * process by automatically submitting required information.
   */
  userProfile (accessToken: string, done: (err: Error | null, profile: P) => void): void;

  /**
   * Return extra parameters to be included in the authorization request.
   *
   * Some OAuth 2.0 providers allow additional, non-standard parameters to be
   * included when requesting authorization.  Since these parameters are not
   * standardized by the OAuth 2.0 specification, OAuth 2.0-based authentication
   * strategies can overrride this function in order to populate these parameters
   * as required by the provider.
   */
  authorizationParams (options: any): { [key: string]: string };

  /**
   * Return extra parameters to be included in the token request.
   *
   * Some OAuth 2.0 providers allow additional, non-standard parameters to be
   * included when requesting an access token.  Since these parameters are not
   * standardized by the OAuth 2.0 specification, OAuth 2.0-based authentication
   * strategies can overrride this function in order to populate these parameters
   * as required by the provider.
   */
  tokenParams (options: any): { [key: string]: string };

  /**
   * Parse error response from OAuth 2.0 endpoint.
   *
   * OAuth 2.0-based authentication strategies can overrride this function in
   * order to parse error responses received from the token endpoint, allowing the
   * most informative message to be displayed.
   *
   * If this function is not overridden, the body will be parsed in accordance
   * with RFC 6749, section 5.2.
   */
  parseErrorResponse (body: string, status: number): Error | null;
}

namespace OAuth2Strategy {
  export interface Options extends OAuth2Options {
    authorizationURL: string;
    tokenURL: string;
  }

  export interface OAuth2Options {
    /**
     * URL used to obtain an authorization grant.
     */
    authorizationURL?: string;
    /**
     * URL used to obtain an access token.
     */
    tokenURL?: string;
    /**
     * Identifies client to service provider.
     */
    clientID: string;
    /**
     * Secret used to establish ownership of the client identifer.
     */
    clientSecret: string;
    /**
     * URL to which the service provider will redirect the user after obtaining authorization.
     */
    callbackURL: string;
    /**
     * When `true`, `req` is the first argument to the verify callback (default: `false`).
     */
    passReqToCallback?: boolean;
    scope?: string[];
    scopeSeparator?: string;
    state?: string;
    store?: Store;
    proxy?: boolean;
    skipUserProfile?: boolean;
    customHeaders?: {
      [key: string]: string | string[];
    };
  }

  export interface Request extends Strategy.Request {
    query: {
      [key: string]: string;
    };
  }

  export interface AuthenticateOptions {
    callbackURL: string;
    scope?: string;
    state?: string;
  }

  export interface VerifyFunction <P> {
    (accessToken: string, refreshToken: string, profile: P, done: (err: Error | null, user: any | boolean, info?: any) => void): void;
  }
}

export = OAuth2Strategy;
}
declare module 'passport-oauth2/lib/strategy' {
import main = require('~passport-oauth2/lib/strategy');
export = main;
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-passport-oauth2/b3d37ae5a881932321d5a4b1a052ddc4ef5af42c/lib/errors/authorizationerror.d.ts
declare module '~passport-oauth2/lib/errors/authorizationerror' {
/**
 * `AuthorizationError` error.
 *
 * AuthorizationError represents an error in response to an authorization
 * request.  For details, refer to RFC 6749, section 4.1.2.1.
 *
 * References:
 *   - [The OAuth 2.0 Authorization Framework](http://tools.ietf.org/html/rfc6749)
 */
class AuthorizationError extends Error {
  message: string;
  code: string;
  uri?: string;
  status: number;
  constructor (message: string, code?: string, uri?: string, status?: number);
}

export = AuthorizationError;
}
declare module 'passport-oauth2/lib/errors/authorizationerror' {
import main = require('~passport-oauth2/lib/errors/authorizationerror');
export = main;
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-passport-oauth2/b3d37ae5a881932321d5a4b1a052ddc4ef5af42c/lib/errors/tokenerror.d.ts
declare module '~passport-oauth2/lib/errors/tokenerror' {
/**
 * `TokenError` error.
 *
 * TokenError represents an error received from a token endpoint.  For details,
 * refer to RFC 6749, section 5.2.
 *
 * References:
 *   - [The OAuth 2.0 Authorization Framework](http://tools.ietf.org/html/rfc6749)
 */
class TokenError extends Error {
  message: string;
  code: string;
  uri?: string;
  status: number;
  constructor (message: string, code?: string, uri?: string, status?: number);
}

export = TokenError;
}
declare module 'passport-oauth2/lib/errors/tokenerror' {
import main = require('~passport-oauth2/lib/errors/tokenerror');
export = main;
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-passport-oauth2/b3d37ae5a881932321d5a4b1a052ddc4ef5af42c/lib/errors/internaloautherror.d.ts
declare module '~passport-oauth2/lib/errors/internaloautherror' {
/**
 * `InternalOAuthError` error.
 *
 * InternalOAuthError wraps errors generated by node-oauth.  By wrapping these
 * objects, error messages can be formatted in a manner that aids in debugging
 * OAuth issues.
 */
class InternalOAuthError extends Error {
  message: string;
  err: Error;
  constructor (message: string, err: Error);
}

export = InternalOAuthError;
}
declare module 'passport-oauth2/lib/errors/internaloautherror' {
import main = require('~passport-oauth2/lib/errors/internaloautherror');
export = main;
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-passport-oauth2/b3d37ae5a881932321d5a4b1a052ddc4ef5af42c/lib/index.d.ts
declare module '~passport-oauth2/lib/index' {
import _Strategy = require('~passport-oauth2/lib/strategy');
import _AuthorizationError = require('~passport-oauth2/lib/errors/authorizationerror');
import _TokenError = require('~passport-oauth2/lib/errors/tokenerror');
import _InternalOAuthError = require('~passport-oauth2/lib/errors/internaloautherror');

module '~passport-oauth2/lib/strategy' {
  export const Strategy: typeof _Strategy;
  export const AuthorizationError: typeof _AuthorizationError;
  export const TokenError: typeof _TokenError;
  export const InternalOAuthError: typeof _InternalOAuthError;
}

export = _Strategy;
}
declare module 'passport-oauth2/lib/index' {
import main = require('~passport-oauth2/lib/index');
export = main;
}
declare module 'passport-oauth2' {
import main = require('~passport-oauth2/lib/index');
export = main;
}
